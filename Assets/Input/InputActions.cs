//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Navigation"",
            ""id"": ""e503d5ac-deae-4f07-bd31-d7da51103341"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""1d9950f6-37a0-4489-99c1-2142dcf99d41"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""type"": ""Value"",
                    ""id"": ""25db1890-7a7b-4202-bbf8-0becfc3eeb1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ad4d6f8-1d24-40e8-acd1-ff7eeaebd5db"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23d73e71-5e9e-4029-87b8-140f3b8b43d1"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CircuitSelection"",
            ""id"": ""e6ff0838-dc04-4f0c-a68d-333a6071dfa0"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""7ea845fb-03f0-4956-ae9d-e3c4fe9e4d15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09a9cefc-90b3-44db-b9a7-547b192951d1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3225598a-9a12-412f-971b-1e1f5120dd67"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controls"",
            ""id"": ""f63dcb6e-307b-4a81-a5b1-8fe20196179c"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Button"",
                    ""id"": ""c00b2972-7ad0-4e03-b6b0-73ac3564ee82"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throttle & Brake"",
                    ""type"": ""Button"",
                    ""id"": ""7bcd7f8f-0dcd-4b4c-a9b3-86be9e1d8d53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Clutch"",
                    ""type"": ""Button"",
                    ""id"": ""a5eadf2e-613e-47d3-8cb9-fdc975abc5f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hand Brake"",
                    ""type"": ""Button"",
                    ""id"": ""738bda2a-c10c-4961-aa1e-ecfd8f4cb705"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Camera"",
                    ""type"": ""Button"",
                    ""id"": ""b2f4f6d4-0ba8-4f0f-b8f4-b3f637be82f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""220fb4a2-0afd-409b-bf0a-4de5e527c9f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle UI"",
                    ""type"": ""Button"",
                    ""id"": ""f92eaa99-4b12-4672-aa2f-71b3e28ec0d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f445b1cc-7c8f-41e4-95f8-ebddcb6a7aa7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""69d724ae-c175-4a00-9710-1768c624b88c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""42ee8756-d36f-44d0-bb30-7fe439acb76c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""2ffd7e8f-a2d9-48f3-8dda-d38006ce9f21"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eb9b8a36-0820-443d-bf16-8373caabb3af"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4ad142ff-117b-4509-bed6-67b3cb76a517"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""65bd2b4f-45a2-40de-9fb0-6b3d17c06bc1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f5ef93c1-8b07-45f8-b2ce-1fe031c87d31"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d78f5a02-5482-49e1-b717-143a603ed98c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""a012265f-fe17-40c0-9f6f-62388f1ad6b9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6f3e0f47-c6bb-4716-a883-cf8d3db08526"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7506d072-51b4-436f-9920-2c59d5d6a515"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1716fd32-9609-42b4-9e5a-eefed8328166"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e16eea5-9c02-4e43-b429-fc2731276f28"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8d2aeb2-b497-489a-9f70-31713b28c6c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hand Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4923d5ef-a6ed-4795-9ddc-dab1bf45437f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f771bcf9-bca2-4707-ad16-d4d6eaad836e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e25e2fd6-b8f6-4bef-bc3e-b3503c5e30bc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a8f67f0-f31b-4bc6-ac30-ee420934be9f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bbc10b8-898a-4a1c-b430-c84e855aca00"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Garage"",
            ""id"": ""3d2538ed-66ed-402a-94b8-37a41e9fa702"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""c56d4330-c218-4a77-ad70-bb30c92a452d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle"",
                    ""type"": ""Button"",
                    ""id"": ""f9a80d7b-e515-4504-a7ae-30b01e41e984"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4218e9e-c6e3-4472-af7d-da25a533d560"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c478ad6-cabe-48ea-9fc7-9acf64c3ed85"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""36f6952d-5744-4289-b00c-369783972089"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ed2a848b-03a9-4568-8e28-f7993418792b"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d5bb4f0c-57d1-4bee-a5a5-f8254d1650c8"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Options"",
            ""id"": ""56b1b3fc-b599-489f-a3d9-04fa648b215f"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""17369050-cccf-4461-9ec8-7e925ec86a58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""11f742d5-e023-413c-a6ff-c5c21ea9e163"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad53ad8c-2fc9-463b-8081-70c4795a42b7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Navigation
        m_Navigation = asset.FindActionMap("Navigation", throwIfNotFound: true);
        m_Navigation_Mouse = m_Navigation.FindAction("Mouse", throwIfNotFound: true);
        m_Navigation_Keyboard = m_Navigation.FindAction("Keyboard", throwIfNotFound: true);
        // CircuitSelection
        m_CircuitSelection = asset.FindActionMap("CircuitSelection", throwIfNotFound: true);
        m_CircuitSelection_Back = m_CircuitSelection.FindAction("Back", throwIfNotFound: true);
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Steer = m_Controls.FindAction("Steer", throwIfNotFound: true);
        m_Controls_ThrottleBrake = m_Controls.FindAction("Throttle & Brake", throwIfNotFound: true);
        m_Controls_Clutch = m_Controls.FindAction("Clutch", throwIfNotFound: true);
        m_Controls_HandBrake = m_Controls.FindAction("Hand Brake", throwIfNotFound: true);
        m_Controls_CycleCamera = m_Controls.FindAction("Cycle Camera", throwIfNotFound: true);
        m_Controls_Pause = m_Controls.FindAction("Pause", throwIfNotFound: true);
        m_Controls_ToggleUI = m_Controls.FindAction("Toggle UI", throwIfNotFound: true);
        // Garage
        m_Garage = asset.FindActionMap("Garage", throwIfNotFound: true);
        m_Garage_Back = m_Garage.FindAction("Back", throwIfNotFound: true);
        m_Garage_Cycle = m_Garage.FindAction("Cycle", throwIfNotFound: true);
        // Options
        m_Options = asset.FindActionMap("Options", throwIfNotFound: true);
        m_Options_Back = m_Options.FindAction("Back", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_Navigation.enabled, "This will cause a leak and performance issues, InputActions.Navigation.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CircuitSelection.enabled, "This will cause a leak and performance issues, InputActions.CircuitSelection.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controls.enabled, "This will cause a leak and performance issues, InputActions.Controls.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Garage.enabled, "This will cause a leak and performance issues, InputActions.Garage.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Options.enabled, "This will cause a leak and performance issues, InputActions.Options.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Navigation
    private readonly InputActionMap m_Navigation;
    private List<INavigationActions> m_NavigationActionsCallbackInterfaces = new List<INavigationActions>();
    private readonly InputAction m_Navigation_Mouse;
    private readonly InputAction m_Navigation_Keyboard;
    public struct NavigationActions
    {
        private @InputActions m_Wrapper;
        public NavigationActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_Navigation_Mouse;
        public InputAction @Keyboard => m_Wrapper.m_Navigation_Keyboard;
        public InputActionMap Get() { return m_Wrapper.m_Navigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigationActions set) { return set.Get(); }
        public void AddCallbacks(INavigationActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Add(instance);
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Keyboard.started += instance.OnKeyboard;
            @Keyboard.performed += instance.OnKeyboard;
            @Keyboard.canceled += instance.OnKeyboard;
        }

        private void UnregisterCallbacks(INavigationActions instance)
        {
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Keyboard.started -= instance.OnKeyboard;
            @Keyboard.performed -= instance.OnKeyboard;
            @Keyboard.canceled -= instance.OnKeyboard;
        }

        public void RemoveCallbacks(INavigationActions instance)
        {
            if (m_Wrapper.m_NavigationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigationActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigationActions @Navigation => new NavigationActions(this);

    // CircuitSelection
    private readonly InputActionMap m_CircuitSelection;
    private List<ICircuitSelectionActions> m_CircuitSelectionActionsCallbackInterfaces = new List<ICircuitSelectionActions>();
    private readonly InputAction m_CircuitSelection_Back;
    public struct CircuitSelectionActions
    {
        private @InputActions m_Wrapper;
        public CircuitSelectionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_CircuitSelection_Back;
        public InputActionMap Get() { return m_Wrapper.m_CircuitSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CircuitSelectionActions set) { return set.Get(); }
        public void AddCallbacks(ICircuitSelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_CircuitSelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CircuitSelectionActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(ICircuitSelectionActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(ICircuitSelectionActions instance)
        {
            if (m_Wrapper.m_CircuitSelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICircuitSelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_CircuitSelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CircuitSelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CircuitSelectionActions @CircuitSelection => new CircuitSelectionActions(this);

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Steer;
    private readonly InputAction m_Controls_ThrottleBrake;
    private readonly InputAction m_Controls_Clutch;
    private readonly InputAction m_Controls_HandBrake;
    private readonly InputAction m_Controls_CycleCamera;
    private readonly InputAction m_Controls_Pause;
    private readonly InputAction m_Controls_ToggleUI;
    public struct ControlsActions
    {
        private @InputActions m_Wrapper;
        public ControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_Controls_Steer;
        public InputAction @ThrottleBrake => m_Wrapper.m_Controls_ThrottleBrake;
        public InputAction @Clutch => m_Wrapper.m_Controls_Clutch;
        public InputAction @HandBrake => m_Wrapper.m_Controls_HandBrake;
        public InputAction @CycleCamera => m_Wrapper.m_Controls_CycleCamera;
        public InputAction @Pause => m_Wrapper.m_Controls_Pause;
        public InputAction @ToggleUI => m_Wrapper.m_Controls_ToggleUI;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @ThrottleBrake.started += instance.OnThrottleBrake;
            @ThrottleBrake.performed += instance.OnThrottleBrake;
            @ThrottleBrake.canceled += instance.OnThrottleBrake;
            @Clutch.started += instance.OnClutch;
            @Clutch.performed += instance.OnClutch;
            @Clutch.canceled += instance.OnClutch;
            @HandBrake.started += instance.OnHandBrake;
            @HandBrake.performed += instance.OnHandBrake;
            @HandBrake.canceled += instance.OnHandBrake;
            @CycleCamera.started += instance.OnCycleCamera;
            @CycleCamera.performed += instance.OnCycleCamera;
            @CycleCamera.canceled += instance.OnCycleCamera;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @ToggleUI.started += instance.OnToggleUI;
            @ToggleUI.performed += instance.OnToggleUI;
            @ToggleUI.canceled += instance.OnToggleUI;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @ThrottleBrake.started -= instance.OnThrottleBrake;
            @ThrottleBrake.performed -= instance.OnThrottleBrake;
            @ThrottleBrake.canceled -= instance.OnThrottleBrake;
            @Clutch.started -= instance.OnClutch;
            @Clutch.performed -= instance.OnClutch;
            @Clutch.canceled -= instance.OnClutch;
            @HandBrake.started -= instance.OnHandBrake;
            @HandBrake.performed -= instance.OnHandBrake;
            @HandBrake.canceled -= instance.OnHandBrake;
            @CycleCamera.started -= instance.OnCycleCamera;
            @CycleCamera.performed -= instance.OnCycleCamera;
            @CycleCamera.canceled -= instance.OnCycleCamera;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @ToggleUI.started -= instance.OnToggleUI;
            @ToggleUI.performed -= instance.OnToggleUI;
            @ToggleUI.canceled -= instance.OnToggleUI;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // Garage
    private readonly InputActionMap m_Garage;
    private List<IGarageActions> m_GarageActionsCallbackInterfaces = new List<IGarageActions>();
    private readonly InputAction m_Garage_Back;
    private readonly InputAction m_Garage_Cycle;
    public struct GarageActions
    {
        private @InputActions m_Wrapper;
        public GarageActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Garage_Back;
        public InputAction @Cycle => m_Wrapper.m_Garage_Cycle;
        public InputActionMap Get() { return m_Wrapper.m_Garage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GarageActions set) { return set.Get(); }
        public void AddCallbacks(IGarageActions instance)
        {
            if (instance == null || m_Wrapper.m_GarageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GarageActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Cycle.started += instance.OnCycle;
            @Cycle.performed += instance.OnCycle;
            @Cycle.canceled += instance.OnCycle;
        }

        private void UnregisterCallbacks(IGarageActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Cycle.started -= instance.OnCycle;
            @Cycle.performed -= instance.OnCycle;
            @Cycle.canceled -= instance.OnCycle;
        }

        public void RemoveCallbacks(IGarageActions instance)
        {
            if (m_Wrapper.m_GarageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGarageActions instance)
        {
            foreach (var item in m_Wrapper.m_GarageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GarageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GarageActions @Garage => new GarageActions(this);

    // Options
    private readonly InputActionMap m_Options;
    private List<IOptionsActions> m_OptionsActionsCallbackInterfaces = new List<IOptionsActions>();
    private readonly InputAction m_Options_Back;
    public struct OptionsActions
    {
        private @InputActions m_Wrapper;
        public OptionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Back => m_Wrapper.m_Options_Back;
        public InputActionMap Get() { return m_Wrapper.m_Options; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OptionsActions set) { return set.Get(); }
        public void AddCallbacks(IOptionsActions instance)
        {
            if (instance == null || m_Wrapper.m_OptionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OptionsActionsCallbackInterfaces.Add(instance);
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IOptionsActions instance)
        {
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IOptionsActions instance)
        {
            if (m_Wrapper.m_OptionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOptionsActions instance)
        {
            foreach (var item in m_Wrapper.m_OptionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OptionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OptionsActions @Options => new OptionsActions(this);
    public interface INavigationActions
    {
        void OnMouse(InputAction.CallbackContext context);
        void OnKeyboard(InputAction.CallbackContext context);
    }
    public interface ICircuitSelectionActions
    {
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IControlsActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnThrottleBrake(InputAction.CallbackContext context);
        void OnClutch(InputAction.CallbackContext context);
        void OnHandBrake(InputAction.CallbackContext context);
        void OnCycleCamera(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnToggleUI(InputAction.CallbackContext context);
    }
    public interface IGarageActions
    {
        void OnBack(InputAction.CallbackContext context);
        void OnCycle(InputAction.CallbackContext context);
    }
    public interface IOptionsActions
    {
        void OnBack(InputAction.CallbackContext context);
    }
}
