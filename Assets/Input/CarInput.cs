//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @CarInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""f63dcb6e-307b-4a81-a5b1-8fe20196179c"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Button"",
                    ""id"": ""c00b2972-7ad0-4e03-b6b0-73ac3564ee82"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throttle & Brake"",
                    ""type"": ""Button"",
                    ""id"": ""7bcd7f8f-0dcd-4b4c-a9b3-86be9e1d8d53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Clutch"",
                    ""type"": ""Button"",
                    ""id"": ""a5eadf2e-613e-47d3-8cb9-fdc975abc5f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hand Brake"",
                    ""type"": ""Button"",
                    ""id"": ""738bda2a-c10c-4961-aa1e-ecfd8f4cb705"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cycle Camera"",
                    ""type"": ""Button"",
                    ""id"": ""b2f4f6d4-0ba8-4f0f-b8f4-b3f637be82f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f445b1cc-7c8f-41e4-95f8-ebddcb6a7aa7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""69d724ae-c175-4a00-9710-1768c624b88c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""42ee8756-d36f-44d0-bb30-7fe439acb76c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""2ffd7e8f-a2d9-48f3-8dda-d38006ce9f21"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eb9b8a36-0820-443d-bf16-8373caabb3af"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4ad142ff-117b-4509-bed6-67b3cb76a517"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""65bd2b4f-45a2-40de-9fb0-6b3d17c06bc1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f5ef93c1-8b07-45f8-b2ce-1fe031c87d31"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d78f5a02-5482-49e1-b717-143a603ed98c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""a012265f-fe17-40c0-9f6f-62388f1ad6b9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6f3e0f47-c6bb-4716-a883-cf8d3db08526"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7506d072-51b4-436f-9920-2c59d5d6a515"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle & Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1716fd32-9609-42b4-9e5a-eefed8328166"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8d2aeb2-b497-489a-9f70-31713b28c6c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hand Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4923d5ef-a6ed-4795-9ddc-dab1bf45437f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cycle Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Steer = m_Controls.FindAction("Steer", throwIfNotFound: true);
        m_Controls_ThrottleBrake = m_Controls.FindAction("Throttle & Brake", throwIfNotFound: true);
        m_Controls_Clutch = m_Controls.FindAction("Clutch", throwIfNotFound: true);
        m_Controls_HandBrake = m_Controls.FindAction("Hand Brake", throwIfNotFound: true);
        m_Controls_CycleCamera = m_Controls.FindAction("Cycle Camera", throwIfNotFound: true);
    }

    ~@CarInput()
    {
        Debug.Assert(!m_Controls.enabled, "This will cause a leak and performance issues, CarInput.Controls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Steer;
    private readonly InputAction m_Controls_ThrottleBrake;
    private readonly InputAction m_Controls_Clutch;
    private readonly InputAction m_Controls_HandBrake;
    private readonly InputAction m_Controls_CycleCamera;
    public struct ControlsActions
    {
        private @CarInput m_Wrapper;
        public ControlsActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_Controls_Steer;
        public InputAction @ThrottleBrake => m_Wrapper.m_Controls_ThrottleBrake;
        public InputAction @Clutch => m_Wrapper.m_Controls_Clutch;
        public InputAction @HandBrake => m_Wrapper.m_Controls_HandBrake;
        public InputAction @CycleCamera => m_Wrapper.m_Controls_CycleCamera;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @ThrottleBrake.started += instance.OnThrottleBrake;
            @ThrottleBrake.performed += instance.OnThrottleBrake;
            @ThrottleBrake.canceled += instance.OnThrottleBrake;
            @Clutch.started += instance.OnClutch;
            @Clutch.performed += instance.OnClutch;
            @Clutch.canceled += instance.OnClutch;
            @HandBrake.started += instance.OnHandBrake;
            @HandBrake.performed += instance.OnHandBrake;
            @HandBrake.canceled += instance.OnHandBrake;
            @CycleCamera.started += instance.OnCycleCamera;
            @CycleCamera.performed += instance.OnCycleCamera;
            @CycleCamera.canceled += instance.OnCycleCamera;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @ThrottleBrake.started -= instance.OnThrottleBrake;
            @ThrottleBrake.performed -= instance.OnThrottleBrake;
            @ThrottleBrake.canceled -= instance.OnThrottleBrake;
            @Clutch.started -= instance.OnClutch;
            @Clutch.performed -= instance.OnClutch;
            @Clutch.canceled -= instance.OnClutch;
            @HandBrake.started -= instance.OnHandBrake;
            @HandBrake.performed -= instance.OnHandBrake;
            @HandBrake.canceled -= instance.OnHandBrake;
            @CycleCamera.started -= instance.OnCycleCamera;
            @CycleCamera.performed -= instance.OnCycleCamera;
            @CycleCamera.canceled -= instance.OnCycleCamera;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    public interface IControlsActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnThrottleBrake(InputAction.CallbackContext context);
        void OnClutch(InputAction.CallbackContext context);
        void OnHandBrake(InputAction.CallbackContext context);
        void OnCycleCamera(InputAction.CallbackContext context);
    }
}
